&. A* heuristic only take time into account, rather than x,y,time;
&. A* may have many optimal paths, how to select from those?
&. Different cost in different velocity;

&.The min is 19370; the max is 72000; the max is 54000 when no crash.


&. The possible data changes of semi-final: start point do not crash even velocity > 15; allow to land when velocity is too strong.

&. wind-speed prediction should take smoothness into account.

&. 3D path search algorithm.

&. To speed A* algorithm, the diagram should be a cone roof, although that has no effect on the resulting path.

&. If do wind speed prediction, should consider more about points whose wind speed is nearby 15 than others.

&. whether should consider time when set cost?

Train_dijkstra_risky_wall_wind_15_____2017-12-29-17-20-46


Non risky, conservative linear
model real:
43942
[[ 366  200  192  362  440  674  624  686  128  202]
 [ 366  200  192  362  440  674  624  752  128  202]
 [ 366  430  392  802 1056 1440 1072 1440  128  202]


Real_weather:A_star
costs[wind_real_day_hour <= 14] = np.float64(10 ** (100 * (-1)))
        costs[wind_real_day_hour >= 15.5] = np.float64(10 ** (100 * 0.5))
        costs[np.logical_and(14 < wind_real_day_hour, wind_real_day_hour < 15.5)] = np.float64(10 ** (
            100 * (wind_real_day_hour[np.logical_and(14 < wind_real_day_hour, wind_real_day_hour < 15.5)] - 15)))
47362
[[ 366  200  192  362  440  674  624  686  128  202]
 [ 366  200  192  362  440  674  638  768  128  202]
 [ 366  468 1440 1440 1440 1440 1076 1440  168 1440]
 [1440 1440 1440 1440 1440 1440 1440 1440 1440 1440]
 [1440 1440 1440 1440 1440 1440 1440 1440 1440 1440]]
26

Real_weather:dijistra
costs[wind_real_day_hour <= 14] = np.float64(10 ** (100 * (-1)))
        costs[wind_real_day_hour >= 15.5] = np.float64(10 ** (100 * 0.5))
        costs[np.logical_and(14 < wind_real_day_hour, wind_real_day_hour < 15.5)] = np.float64(10 ** (
            100 * (wind_real_day_hour[np.logical_and(14 < wind_real_day_hour, wind_real_day_hour < 15.5)] - 15)))
 [ 366  704  408  898 1078 1440 1078 1440  166  710]

Real_weather:A_star
costs[wind_real_day_hour <= 14] = np.float64(10 ** (100 * (-1)))+1
        costs[wind_real_day_hour >= 15.5] = np.float64(10 ** (100 * 0.5))+1
        costs[np.logical_and(14 < wind_real_day_hour, wind_real_day_hour < 15.5)] = np.float64(10 ** (
            100 * (wind_real_day_hour[np.logical_and(14 < wind_real_day_hour, wind_real_day_hour < 15.5)] - 15))) +1
 [ 366 1440 1440 1440 1440 1440 1440 1440  128  202]

 Real_weather:A_star
costs[wind_real_day_hour <= 14] = np.float64(10 ** (100 * (-1)))+2
        costs[wind_real_day_hour >= 15.5] = np.float64(10 ** (100 * 0.5))+2
        costs[np.logical_and(14 < wind_real_day_hour, wind_real_day_hour < 15.5)] = np.float64(10 ** (
            100 * (wind_real_day_hour[np.logical_and(14 < wind_real_day_hour, wind_real_day_hour < 15.5)] - 15))) +2
 [ 366 1440 1440 1440 1440 1440 1440 1440  128  202]


 Real_weather:A_star
 cost(14)= 10 ** (6 * (0))
[ 366  672  408  910 1078 1440 1078 1440  146  202]

 Real_weather:dijkstra
 cost(14)= 10 ** (6 * (0))
[ 366  672  408  910 1078 1440 1078 1440  146  202]

 Real_weather:A_star
 costs[wind_real_day_hour <= 13.5] = np.float64(10 ** (6 * (0)))
 costs[wind_real_day_hour >= 16] = np.float64(10 ** (6 * 2.5))
[ 374  714  416 1036 1078 1440 1078 1440  168  718]

  [ 366  430  392  802 1056 1440 1072 1440  128  202]